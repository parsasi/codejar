{"version":3,"sources":["assets/logo_transparent_sq.png","components/Fa.js","components/WindowBar.js","components/MenuItem.js","components/MenuItemLogic.js","components/AddFileButton.js","components/Menu.js","components/SideBar.js","components/CodeEditor.js","components/EditorContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","props","icon","className","name","href","Fa","faSave","current","save","extention","file","faCss3","faHtml5","faJs","faDotCircle","figureOutTheIcon","MenuItem","src","Logo","alt","MenuItemLogic","AddFileButton","WindowBar","SideBar","CodeEditor","EditorContainer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","App","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.19889fd1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_transparent_sq.fbe8bfd6.png\";","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nexport default (props) => {\n    return <FontAwesomeIcon icon={props.icon} />\n}","import React from 'react'\nimport Fa from './Fa'\nimport { faSave } from '@fortawesome/free-solid-svg-icons'\n\nexport default (props) => {\n    return (\n        <div className=\"windowbar\">\n            <span>File</span><span>Editing</span><span>Search</span><span>Show</span><span>Navigation</span><span>Development</span><span>Tools</span><span>Help</span>\n            <div className=\"controls\">\n                <span className=\"min\"><ion-icon name=\"arrow-down\"></ion-icon></span>\n                <span className=\"max\"><ion-icon name=\"arrow-up\"></ion-icon></span>\n                <a className=\"close\" href=\"#save\"><Fa icon={faSave}/></a>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport Fa from './Fa'\nexport default (props) => {\n    \n    return (\n        <a href=\"#save\" className={`${props.current} ${props.save} ${props.extention}`}>\n            <Fa icon={props.icon}></Fa>\n            &nbsp;&nbsp;&nbsp;\n            {props.file.name}\n            <b>.{props.file.extention}</b>\n        </a>\n    )\n}","import React from 'react'\nimport MenuItem from './MenuItem'\nimport { faCss3 , faHtml5 , faJs } from '@fortawesome/free-brands-svg-icons'\nimport { faDotCircle } from '@fortawesome/free-solid-svg-icons'\n\n\nexport default (props) => {\n    const current = props.current ? \"current\" : \"\"\n    const save = props.save ? \"save\": \"css\"\n    const extention = props.file.extention\n    const icon = figureOutTheIcon(extention)\n    return (<MenuItem file={props.file} current={current} save={save} extention={extention} icon={icon}/>)\n}\nfunction figureOutTheIcon(extention){\n    switch(extention){\n        case 'css':\n            return faCss3;\n            break;\n        case 'html':\n            return faHtml5;\n            break;\n        case 'js':\n            return faJs;\n            break;\n        default:\n            return faDotCircle;\n            break;\n    }\n}","import React from 'react'\n\nexport default (props) => {\n    return <a href=\"#\" className=\"addFile\"> +</a>\n}","import React from 'react'\nimport Fa from './Fa'\nimport MenuItemLogic from './MenuItemLogic'\nimport AddFileButton from './AddFileButton'\nimport '../styles/Menu.css'\nimport Logo from '../assets/logo_transparent_sq.png'\nexport default (props) => {\n    return (\n        <div className=\"menu\">\n            <div className=\"MenuLogo\">\n                <img src={Logo} alt=\"Logo\"/>\n            </div>\n            <MenuItemLogic current={true} save={true} file={{extention : 'css' , name:'styles'}}/>\n            <MenuItemLogic current={false} save={false} file={{extention : 'html' , name:'index'}}/>\n            <MenuItemLogic current={false} save={true} file={{extention : 'js' , name:'main'}}/>\n            <AddFileButton></AddFileButton>\n        </div>\n    )\n}","import React from 'react'\nimport Menu from './Menu'\nexport default (props) => {\n    return (\n        <div className=\"SideBar\">\n            <Menu />\n        </div>\n    )\n}","import React from 'react'\n\nexport default (props) => {\n    return (\n        <div className=\"code\">\n                \n        </div>\n    )\n}","import React from 'react'\nimport WindowBar from './WindowBar'\nimport SideBar from './SideBar'\nimport CodeEditor from './CodeEditor'\nimport '../styles/generics.css'\nexport default (props) => {\n    return (\n        <div className=\"EditorContainer\">\n            <WindowBar/>\n            <SideBar />\n            <CodeEditor />\n        </div>\n    )\n}","import React from 'react'\nimport Monaco from './Monaco'\nimport EditorContainer from './EditorContainer'\nexport default (props) => {\n    return (\n        <div className=\"App\">\n             <EditorContainer />\n        </div>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}